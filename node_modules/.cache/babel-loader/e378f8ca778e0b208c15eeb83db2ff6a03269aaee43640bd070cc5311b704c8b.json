{"ast":null,"code":"const alphabets = [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\")];\nconst numbers = [...\"1234567890\".split(\"\").map(num => +num)];\nconst symbols = [...\"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\".split(\"\")];\nconst passwordLength = 8;\nconst getRandomNumber = () => Math.floor(Math.random() * passwordLength);\nconst getRandomPassword = () => {\n  const randompassword = [];\n  const params = [...alphabets, ...numbers, ...symbols];\n  while (randompassword.length < passwordLength) {\n    const randomInt = Math.floor(Math.random() * params.length);\n    randompassword.push(params[randomInt]);\n  }\n  return randompassword.join(\"\");\n};\nexport const generatePassword = options => {\n  if (options) {\n    const {\n      alphabets,\n      numbers,\n      symbols\n    } = options;\n    const generatedPasssword = [];\n    for (let i = 0; i < passwordLength; i++) {\n      alphabets && generatedPasssword.push(alphabets[getRandomNumber(alphabets.length)]);\n      numbers && generatedPasssword.push(numbers[getRandomNumber(numbers.length)]);\n      symbols && generatedPasssword.push(symbols[getRandomNumber(symbols.length)]);\n    }\n    console.log('******generatedPasssword******');\n    console.log(generatedPasssword);\n    if (!generatedPasssword.length) return passwordLength ? generatePassword().slice(0, passwordLength) : generatePassword();\n    return passwordLength ? generatedPasssword.slice(0, passwordLength).join(\"\") : generatedPasssword.slice(0, 16).join(\"\");\n  }\n  return getRandomPassword();\n};","map":{"version":3,"names":["alphabets","split","numbers","map","num","symbols","passwordLength","getRandomNumber","Math","floor","random","getRandomPassword","randompassword","params","length","randomInt","push","join","generatePassword","options","generatedPasssword","i","console","log","slice"],"sources":["F:/Projects/Other Projects/password-generator-app/src/utils/generatePassword.js"],"sourcesContent":["const alphabets = [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\")];\r\nconst numbers = [...\"1234567890\".split(\"\").map((num) => +num)];\r\nconst symbols = [...\"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\".split(\"\")];\r\n\r\nconst passwordLength = 8\r\nconst getRandomNumber = () => Math.floor(Math.random() * passwordLength);\r\n\r\nconst getRandomPassword = () => {\r\n    const randompassword = []\r\n    const params = [\r\n        ...alphabets,\r\n        ...numbers,\r\n        ...symbols\r\n    ]\r\n    while (randompassword.length < passwordLength) {\r\n        const randomInt = Math.floor(Math.random() * params.length);\r\n        randompassword.push(params[randomInt]);\r\n    }\r\n    return randompassword.join(\"\");\r\n};\r\n\r\nexport const generatePassword = (options) => {\r\n    if (options) {\r\n        const {\r\n            alphabets,\r\n            numbers,\r\n            symbols\r\n        } = options\r\n        const generatedPasssword = [];\r\n\r\n        for (let i = 0; i < passwordLength; i++) {\r\n            alphabets &&\r\n                generatedPasssword.push(alphabets[getRandomNumber(alphabets.length)]);\r\n            numbers &&\r\n                generatedPasssword.push(numbers[getRandomNumber(numbers.length)]);\r\n            symbols &&\r\n                generatedPasssword.push(symbols[getRandomNumber(symbols.length)]);\r\n        }\r\n\r\n        console.log('******generatedPasssword******')\r\n        console.log(generatedPasssword)\r\n        \r\n        if (!generatedPasssword.length)\r\n            return passwordLength ? generatePassword().slice(0, passwordLength) : generatePassword();\r\n            return passwordLength\r\n                ? generatedPasssword.slice(0, passwordLength).join(\"\")\r\n                : generatedPasssword.slice(0, 16).join(\"\");\r\n    }\r\n\r\n    return getRandomPassword();\r\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC,GAAG,sDAAsD,CAACC,KAAK,CAAC,EAAE,CAAC,CAAC;AACvF,MAAMC,OAAO,GAAG,CAAC,GAAG,YAAY,CAACD,KAAK,CAAC,EAAE,CAAC,CAACE,GAAG,CAAEC,GAAG,IAAK,CAACA,GAAG,CAAC,CAAC;AAC9D,MAAMC,OAAO,GAAG,CAAC,GAAG,oCAAoC,CAACJ,KAAK,CAAC,EAAE,CAAC,CAAC;AAEnE,MAAMK,cAAc,GAAG,CAAC;AACxB,MAAMC,eAAe,GAAGA,CAAA,KAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,cAAc,CAAC;AAExE,MAAMK,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,cAAc,GAAG,EAAE;EACzB,MAAMC,MAAM,GAAG,CACX,GAAGb,SAAS,EACZ,GAAGE,OAAO,EACV,GAAGG,OAAO,CACb;EACD,OAAOO,cAAc,CAACE,MAAM,GAAGR,cAAc,EAAE;IAC3C,MAAMS,SAAS,GAAGP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGG,MAAM,CAACC,MAAM,CAAC;IAC3DF,cAAc,CAACI,IAAI,CAACH,MAAM,CAACE,SAAS,CAAC,CAAC;EAC1C;EACA,OAAOH,cAAc,CAACK,IAAI,CAAC,EAAE,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EACzC,IAAIA,OAAO,EAAE;IACT,MAAM;MACFnB,SAAS;MACTE,OAAO;MACPG;IACJ,CAAC,GAAGc,OAAO;IACX,MAAMC,kBAAkB,GAAG,EAAE;IAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,cAAc,EAAEe,CAAC,EAAE,EAAE;MACrCrB,SAAS,IACLoB,kBAAkB,CAACJ,IAAI,CAAChB,SAAS,CAACO,eAAe,CAACP,SAAS,CAACc,MAAM,CAAC,CAAC,CAAC;MACzEZ,OAAO,IACHkB,kBAAkB,CAACJ,IAAI,CAACd,OAAO,CAACK,eAAe,CAACL,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC;MACrET,OAAO,IACHe,kBAAkB,CAACJ,IAAI,CAACX,OAAO,CAACE,eAAe,CAACF,OAAO,CAACS,MAAM,CAAC,CAAC,CAAC;IACzE;IAEAQ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAACH,kBAAkB,CAAC;IAE/B,IAAI,CAACA,kBAAkB,CAACN,MAAM,EAC1B,OAAOR,cAAc,GAAGY,gBAAgB,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,EAAElB,cAAc,CAAC,GAAGY,gBAAgB,CAAC,CAAC;IACxF,OAAOZ,cAAc,GACfc,kBAAkB,CAACI,KAAK,CAAC,CAAC,EAAElB,cAAc,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GACpDG,kBAAkB,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACP,IAAI,CAAC,EAAE,CAAC;EACtD;EAEA,OAAON,iBAAiB,CAAC,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}